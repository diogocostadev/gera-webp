stages:
    - sonarqube-check
    - restore
    - build-dev
    - build
    - deploy


sonarqube-check:
  stage: sonarqube-check
  image: mcr.microsoft.com/dotnet/sdk:8.0
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  
    GIT_DEPTH: "0"  
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:

      - dotnet sonarscanner begin /k:"codigocentral_gerawebp_AY8rX7ZGUVYcF1wWm801" /d:sonar.host.url="https://sonar.codigocentral.com.br"  /d:sonar.token="sqa_eca337e0e441ae9060102c78fcb810bae58d7a06"
      - cd src/conversor/
      - dotnet build
      - dotnet sonarscanner end /d:sonar.token="sqa_eca337e0e441ae9060102c78fcb810bae58d7a06"

  allow_failure: true
  only:
    - merge_requests
    - main
    - dev


restore:
  stage: restore
  image: mcr.microsoft.com/dotnet/sdk:latest
  before_script:
    - echo 'Iniciando restore'
  script:
    - cd src/conversor
    - dotnet restore
    - cd ../..
  after_script:
    - echo 'Restore finalizado'
  retry:
    max: 2 
    when: always 
  rules:
    - if: '$CI_COMMIT_TAG' 
    - if: '$CI_COMMIT_BRANCH == "main"' 


build-dev:
  stage: build-dev
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo 'Iniciando o build'
  script:
    - cd src/conversor
    - docker login -u $USUARIO_DOCKER -p $SENHA_DOCKER $SERVIDOR_DOCKER
    - echo 'Iniciando ===>'
    - docker build -t conversor .
    - docker tag conversor $SERVIDOR_DOCKER/conversor:dev
    - docker push $SERVIDOR_DOCKER/conversor:dev
  after_script:
    - echo 'Build e Imagem Finalizados'
  retry:
    max: 2 
    when: always 
  only:
    - dev


build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo 'Iniciando o build'
  script:
    - cd src/conversor
    - docker login -u $USUARIO_DOCKER -p $SENHA_DOCKER $SERVIDOR_DOCKER
    - docker build -t conversor .
    - docker tag conversor $SERVIDOR_DOCKER/conversor:latest
    - docker push $SERVIDOR_DOCKER/conversor:latest
  after_script:
    - echo 'Build e Imagem Finalizados'
  retry:
    max: 2
    when: always 
  rules:
    - if: '$CI_COMMIT_TAG' 
    - if: '$CI_COMMIT_BRANCH == "main"' 

deploy:
  stage: deploy
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo 'Atualizando o servidor'
  script:
    - docker login -u $USUARIO_DOCKER -p $SENHA_DOCKER $SERVIDOR_DOCKER
    - CONTAINER_NAME="conversor"
    - PORT="55412"
    - ASPNETCORE_ENVIRONMENT="Production"
    - docker pull $SERVIDOR_DOCKER/$CONTAINER_NAME:latest
    - docker network inspect rede_prometheus >/dev/null 2>&1 || docker network create rede_prometheus
    - docker network inspect rede_conversor >/dev/null 2>&1 || docker network create rede_conversor
    - docker rm -f $CONTAINER_NAME || true
    - docker run --network rede_prometheus -d -p $PORT:80 --name $CONTAINER_NAME -e ASPNETCORE_ENVIRONMENT=$ASPNETCORE_ENVIRONMENT $SERVIDOR_DOCKER/$CONTAINER_NAME:latest
    - docker network connect rede_conversor $CONTAINER_NAME
  after_script:
    - echo 'Atualização do servidor realizada 001'  
  retry:
    max: 2 # Maximum number of retries (including the initial attempt)
    when: always # Retry only on failure
  rules:
    - if: '$CI_COMMIT_TAG' # Executa quando uma tag é criada
    - if: '$CI_COMMIT_BRANCH == "main"' # Executa quando há um push para a branch main
